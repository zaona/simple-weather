<template>
  <!-- 页面容器 -->
  <div class="page" style="{{ pageBgStyle }}">
    <scroll class="main" scroll-y="true" bounces="true" style="position: fixed; top: 0; bottom: 0">
      <!-- 头部信息：地点和更新时间 -->
      <div class="header">
        <text class="page-title">{{ location }}</text>
        <text class="page-subtitle">{{ updateTime }}</text>
      </div>

      <!-- 当前天气概览 -->
      <div class="hero-content">
        <image class="weather-icon" src="/common/weather-icons/{{ iconCode }}.png" />
        <text class="weather-text">{{ textDay }}</text>
        <text class="temp-min-max">{{ tempMinMax }}</text>
      </div>

      <!-- 天气指标面板 -->
      <div class="page-list" style="margin-top: 28px">
        <div style="margin-top: -2px; flex-direction: column">
          <div style="margin-top: 14px; flex-direction: column" for="{{ item in figure }}">
            <text class="figure-desc">{{ item.value }}</text>
            <text class="figure-title">{{ item.name }}</text>
          </div>
        </div>
      </div>

      <!-- 未来几天天气预报 -->
      <div class="page-list" style="margin-top: 12px">
        <div style="margin-top: -8px; flex-direction: column">
          <div class="day-weather-item" for="{{ item in dayWeather }}" @click="DetailInfo(item)">
            <text class="day-weather-title">{{ item.name }}</text>
            <div style="justify-content: space-between">
              <text class="day-weather-desc">{{ item.tempMinMax }}</text>
              <image
                class="small-weather-icon"
                src="/common/weather-icons/{{ item.iconCode }}.png"
              />
            </div>
          </div>
        </div>
      </div>
      <div class="hero-content" style="margin-top: 24px">
        <div class="button" onclick="About()">
          <text class="button-text">更多</text>
        </div>
      </div>
    </scroll>
  </div>
</template>

<script>
// 导入系统模块
import router from "@system.router" // 页面路由
import file from "@system.file" // 文件操作
import {showToast} from "@system.prompt" // 提示信息
import interconnect from "@system.interconnect" // 网络连接
import WeatherUtils from "../../common/weather-utils.js" // 天气工具类

// 导入模拟数据，发版时记得注释掉

// import weather from "./weather.json"

export default {
  // 页面私有数据
  private: {
    location: "__", // 地点
    updateTime: "__", // 更新时间
    iconCode: "__", // 天气图标代码
    textDay: "__", // 白天天气描述
    tempMinMax: "__°/__°", // 最高/最低温度
    backgroundColor: "", // 背景颜色
    pageBgStyle: {}, // 页面背景样式对象

    // 天气指标数据
    figure: [
      {name: "紫外线指数", value: "__", uniqueId: 1},
      {name: "相对湿度 （%）", value: "__", uniqueId: 2},
      {name: "__", value: "__", uniqueId: 3},
      {name: "气压 （hPa）", value: "__", uniqueId: 4}
    ],

    // 未来几天天气预报数据
    dayWeather: [{name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 1}]
  },

  // 跳转到详情页
  DetailInfo(selectedItem) {
    if (selectedItem && selectedItem.fxDate) {
      router.push({
        uri: "/pages/detail",
        params: {
          selectedDate: selectedItem.fxDate
        }
      })
    } else {
      showToast({message: "跳转详情页失败", duration: 2000})
    }
  },

  // 跳转到关于页
  About() {
    router.push({
      uri: "/pages/about"
    })
  },

  // 获取天气图标映射表 - 使用通用工具类
  getIconMap() {
    return WeatherUtils.WeatherIconMap
  },

  // 格式化更新时间 - 使用通用工具类
  formatTimeAgo(updateTime) {
    return WeatherUtils.DateUtils.formatTimeAgo(updateTime)
  },

  // 获取今天的日期字符串 - 使用通用工具类
  getTodayString() {
    return WeatherUtils.DateUtils.getTodayString()
  },

  // 更新当前天气信息 - 使用通用工具类
  updateCurrentWeather(weatherData, todayData, timeAgo, iconMap) {
    WeatherUtils.WeatherDataUtils.updateCurrentWeather(this, weatherData, todayData, timeAgo)
    // 动态设置背景颜色
    this.updateBackgroundColor()
  },

  // 动态设置背景颜色
  updateBackgroundColor() {
    // 获取当前时间对应的亮度调整值
    const brightnessAdjustment = WeatherUtils.ColorUtils.getBrightnessByTime()
    // 调整背景颜色亮度
    const adjustedColor = WeatherUtils.ColorUtils.adjustBrightness(
      this.backgroundColor,
      brightnessAdjustment
    )

    // 设置动态背景颜色
    this.pageBgStyle = {
      backgroundColor: adjustedColor
    }
  },

  // 更新天气指标 - 使用通用工具类
  updateWeatherFigures(todayData) {
    this.figure = WeatherUtils.WeatherDataUtils.getBasicWeatherFigures(todayData)
  },

  // 更新天气预报 - 使用通用工具类
  updateForecast(weatherData, today, todayData, iconMap) {
    this.dayWeather = WeatherUtils.WeatherDataUtils.processForecastData(weatherData)
  },

  // 页面初始化
  onInit() {
    // 写入模拟数据，发版时记得注释掉

    // file.writeText({
    //   uri: "internal://files/weather.txt",
    //   text: JSON.stringify(weather),
    //   success: function () {
    //     showToast({message: "模拟数据成功", duration: 200})
    //   },
    //   fail: function (data, code) {
    //     showToast({message: `模拟数据失败${code}`, duration: 200})
    //   }
    // })

    // 检查天气数据文件是否存在
    file.readText({
      uri: "internal://files/weather.txt",
      success: (data) => {
        try {
          const weatherData = JSON.parse(data.text)
          const updateTime = new Date(weatherData.updateTime)
          const timeAgo = this.formatTimeAgo(updateTime)
          const iconMap = this.getIconMap()
          const todayStr = this.getTodayString()
          const today = new Date()
          let todayData = weatherData.daily.find((day) => day.fxDate === todayStr)

          if (todayData) {
            this.updateCurrentWeather(weatherData, todayData, timeAgo, iconMap)
            this.location = weatherData.location || "未知地点"
            this.updateWeatherFigures(todayData)
            this.updateForecast(weatherData, today, todayData, iconMap)
          } else {
            showToast({message: "数据已过期", duration: 200})
          }
        } catch (e) {
          showToast({message: "数据格式错误", duration: 200})
        }
      },
      fail: (data, code) => {
        showToast({message: "本地无数据", duration: 200})
      }
    })
  },

  // 数据传输部分，接收到数据后加载并保存
  // 页面显示时
  onShow() {
    // 创建本地 interconnect 实例
    const connect = interconnect.instance()

    connect.onmessage = (data) => {
      // 检查是否为预检消息
      if (data.data === "start") {
        // 收到预检消息，重复发送5次ready响应，每隔0.2秒
        let count = 0
        const sendReadyMessage = () => {
          if (count >= 5) return

          // 检查连接状态
          connect.getReadyState({
            success: (res) => {
              if (res.status !== 1) {
                // 连接未成功，尝试重新连接
                connect.open()
                // 等待连接建立后再发送消息
                setTimeout(sendReadyMessage, 1000)
                return
              }

              // 连接成功，发送消息
              let messageData = {
                action: "ready",
                timestamp: Date.now(),
                count: count + 1
              }

              connect.send({
                data: messageData,
                success: () => {
                  count++
                  if (count < 5) {
                    setTimeout(sendReadyMessage, 200)
                  }
                },
                fail: () => {
                  count++
                  if (count < 5) {
                    setTimeout(sendReadyMessage, 200)
                  }
                }
              })
            },
            fail: () => {
              count++
              if (count < 5) {
                setTimeout(sendReadyMessage, 200)
              }
            }
          })
        }

        // 开始发送第一次ready消息
        sendReadyMessage()
        return
      }

      // 处理天气数据
      try {
        // 尝试解析接收到的数据
        const weatherData = JSON.parse(data.data)

        // 验证数据格式是否正确
        if (!weatherData || !weatherData.daily || !Array.isArray(weatherData.daily)) {
          showToast({message: "数据格式错误", duration: 2000})
          return
        }

        // 数据格式正确，直接更新界面显示
        const updateTime = new Date(weatherData.updateTime)
        const timeAgo = this.formatTimeAgo(updateTime)
        const iconMap = this.getIconMap()
        const todayStr = this.getTodayString()
        const today = new Date()
        let todayData = weatherData.daily.find((day) => day.fxDate === todayStr)

        if (todayData) {
          this.updateCurrentWeather(weatherData, todayData, timeAgo, iconMap)
          this.location = weatherData.location || "未知地点"
          this.updateWeatherFigures(todayData)
          this.updateForecast(weatherData, today, todayData, iconMap)

          // 界面更新成功后，保存数据到本地
          // 使用重试机制确保数据保存成功
          const saveDataToLocal = (retryCount = 0) => {
            file.writeText({
              uri: "internal://files/weather.txt",
              text: data.data,
              success: () => {
                console.log("数据已保存到本地")
              },
              fail: () => {
                if (retryCount < 2) {
                  // 最多重试2次
                  setTimeout(() => {
                    saveDataToLocal(retryCount + 1)
                  }, 500)
                } else {
                  showToast({message: "数据保存失败", duration: 2000})
                }
              }
            })
          }

          // 开始保存数据
          saveDataToLocal()

          showToast({message: "数据已更新", duration: 1000})
        } else {
          showToast({message: "数据存在缺失", duration: 2000})
        }
      } catch (e) {
        // 数据解析失败，不保存到本地
        showToast({message: "数据解析失败", duration: 2000})
        console.error("数据解析失败:", e)
      }
    }

    connect.onerror = (error) => {
      console.error("Connection error:", error)
    }

    connect.onclose = () => {
      console.log("Connection closed")
      setTimeout(() => {
        connect.open()
      }, 5000)
    }

    connect.open()

    // 存储 connect 实例，以便 onHide/onDestroy 调用 close()
    this._connectInstance = connect
  },

  // 页面隐藏时
  onHide() {
    if (this._connectInstance && typeof this._connectInstance.close === "function") {
      this._connectInstance.close()
    }
  },

  // 页面销毁时
  onDestroy() {
    if (this._connectInstance && typeof this._connectInstance.close === "function") {
      this._connectInstance.close()
    }
  }
}
</script>

<style>
@import "../../common/style.css";

.page-bg {
  flex-direction: column;
  align-items: center;
  /* background-color: #82A4DD; */
  /* background-image: url("../../common/logo.png"); */
  /* background-size: cover; */
}

.day-weather-item {
  margin-top: 16px;
  flex-direction: column;
}

.day-weather-title {
  font-size: 28px;
  color: rgba(255, 255, 255, 0.8);
}

.day-weather-desc {
  font-size: 32px;
}

.small-weather-icon {
  width: 48px;
  height: 48px;
}
</style>
