<template>
  <!-- 页面容器 -->
  <div class="page">
    <!-- 背景图片 -->
    <image class="page-bg" src="/common/weather-bgs/{{ backgroundImage }}.png" />

    <!-- 加载动画容器 -->
    <div class="loading-container" if="{{ isLoading }}">
      <div class="loading-bg"></div>
      <image class="loading-icon" src="/common/loading.png" />
    </div>

    <scroll class="main" scroll-y="true" bounces="true" style="position: fixed; top: 0; bottom: 0" if="{{ !isLoading }}">
      <!-- 头部信息：地点和更新时间 -->
      <div class="header">
        <text class="page-title">{{ location }}</text>
        <text class="page-subtitle">{{ updateTime }}</text>
      </div>

      <!-- 当前天气概览 -->
      <div class="hero-content">
        <image class="weather-icon" src="/common/weather-icons/{{ iconCode }}.png" />
        <text class="weather-text">{{ textDay }}</text>
        <text class="temp-min-max">{{ tempMinMax }}</text>
      </div>

      <!-- 天气指标面板 -->
      <div class="page-list" style="margin-top: 28px">
        <div style="margin-top: -2px; flex-direction: column">
          <div style="margin-top: 14px; flex-direction: column" for="{{ item in figure }}">
            <text class="figure-desc">{{ item.value }}</text>
            <text class="figure-title">{{ item.name }}</text>
          </div>
        </div>
      </div>

      <!-- 未来几天天气预报 -->
      <div class="page-list" style="margin-top: 12px">
        <div style="margin-top: -8px; flex-direction: column">
          <div class="day-weather-item" for="{{ item in dayWeather }}" @click="DetailInfo(item)">
            <text class="day-weather-title">{{ item.name }}</text>
            <div style="justify-content: space-between">
              <text class="day-weather-desc">{{ item.tempMinMax }}</text>
              <image
                class="small-weather-icon"
                src="/common/weather-icons/{{ item.iconCode }}.png"
              />
            </div>
          </div>
        </div>
      </div>
      <div class="hero-content" style="margin-top: 24px">
        <div class="button" onclick="About()">
          <text class="button-text">关于</text>
        </div>
      </div>
    </scroll>
  </div>
</template>

<script>
// 导入系统模块
import router from "@system.router"
import { showToast } from "@system.prompt"

// 导入服务层
import DataService from "../../services/data-service.js"
import ConnectionService from "../../services/connection-service.js"
import DebugService from "../../services/debug-service.js"
import { MESSAGES, TOAST_DURATION } from "../../services/config.js"

// 导入工具类
import { DateUtils, WeatherDataUtils } from "../../common/weather-utils.js"

export default {
  // 页面私有数据
  private: {
    isLoading: true, // 加载状态
    isFirstLoad: true, // 是否是首次加载
    location: "__", // 地点
    updateTime: "__", // 更新时间
    iconCode: "__", // 天气图标代码
    textDay: "__", // 白天天气描述
    tempMinMax: "__°/__°", // 最高/最低温度
    backgroundImage: "", // 背景图片

    // 天气指标数据
    figure: [
      { name: "紫外线指数", value: "__", uniqueId: 1 },
      { name: "相对湿度 （%）", value: "__", uniqueId: 2 },
      { name: "__", value: "__", uniqueId: 3 },
      { name: "气压 （hPa）", value: "__", uniqueId: 4 }
    ],

    // 未来几天天气预报数据
    dayWeather: [{ name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 1 }]
  },

  /**
   * 跳转到详情页
   * @param {Object} selectedItem - 选中的天气项
   */
  DetailInfo(selectedItem) {
    if (selectedItem && selectedItem.fxDate) {
      router.push({
        uri: "/pages/detail",
        params: {
          selectedDate: selectedItem.fxDate
        }
      })
    } else {
      showToast({ 
        message: MESSAGES.NAVIGATION_ERROR, 
        duration: TOAST_DURATION.NORMAL 
      })
    }
  },

  /**
   * 跳转到关于页
   */
  About() {
    router.push({
      uri: "/pages/about"
    })
  },

  /**
   * 加载并显示天气数据
   */
  async loadWeatherData() {
    const result = await DataService.getTodayData()

    if (!result) {
      // getTodayData 内部已经处理了错误提示
      return
    }

    const { weatherData, todayData } = result

    // 计算更新时间
    const updateTime = new Date(weatherData.updateTime)
    const timeAgo = DateUtils.formatTimeAgo(updateTime)

    // 更新界面数据
    WeatherDataUtils.updateCurrentWeather(this, weatherData, todayData, timeAgo)
    this.location = weatherData.location || "未知地点"
    this.figure = WeatherDataUtils.getBasicWeatherFigures(todayData)
    this.dayWeather = WeatherDataUtils.processForecastData(weatherData)
  },

  /**
   * 页面初始化
   */
  async onInit() {
    // 🔧 调试模式：注入模拟数据（可选）
    // 取消下面的注释可启用模拟数据注入
    // await DebugService.injectMockData()

    // 加载本地数据
    await this.loadWeatherData()

    // 首次加载完成，隐藏加载动画
    if (this.isFirstLoad) {
      this.isLoading = false
      this.isFirstLoad = false
    }
  },

  /**
   * 页面显示时初始化连接
   */
  onShow() {
    // 初始化连接并注册消息处理
    ConnectionService.init((data) => {
      this.handleWeatherData(data)
    })
  },

  /**
   * 处理接收到的天气数据
   * @param {Object} data - 接收到的数据
   */
  async handleWeatherData(data) {
    try {
      // 解析数据
      const weatherData = JSON.parse(data.data)

      // 验证数据格式
      if (!DataService.validateWeatherData(weatherData)) {
        showToast({ 
          message: MESSAGES.DATA_FORMAT_ERROR, 
          duration: TOAST_DURATION.NORMAL 
        })
        this.isLoading = false
        return
      }

      // 计算更新时间
      const updateTime = new Date(weatherData.updateTime)
      const timeAgo = DateUtils.formatTimeAgo(updateTime)
      const todayStr = DateUtils.getTodayString()

      // 查找今天的数据
      const todayData = weatherData.daily.find(day => day.fxDate === todayStr)

      if (!todayData) {
        showToast({ 
          message: MESSAGES.DATA_MISSING, 
          duration: TOAST_DURATION.NORMAL 
        })
        return
      }

      // 更新界面
      WeatherDataUtils.updateCurrentWeather(this, weatherData, todayData, timeAgo)
      this.location = weatherData.location || "未知地点"
      this.figure = WeatherDataUtils.getBasicWeatherFigures(todayData)
      this.dayWeather = WeatherDataUtils.processForecastData(weatherData)

      // 保存数据到本地
      await DataService.saveWeatherData(data.data)

      showToast({ 
        message: MESSAGES.DATA_UPDATED, 
        duration: TOAST_DURATION.SHORT 
      })

    } catch (e) {
      showToast({ 
        message: MESSAGES.DATA_PARSE_ERROR, 
        duration: TOAST_DURATION.NORMAL 
      })
      console.error("数据解析失败:", e)
    } finally {
      this.isLoading = false
      ConnectionService.resetConnectionState()
    }
  },

  /**
   * 页面隐藏时关闭连接
   */
  onHide() {
    ConnectionService.close()
  },

  /**
   * 页面销毁时关闭连接
   */
  onDestroy() {
    ConnectionService.close()
  }
}
</script>

<style>
/* 引入公共样式 */
@import "../../common/style.css";
@import "../../common/loading-styles.css";
@import "../../common/page-bg-styles.css";

/* 页面特定样式 */
.page {
  flex-direction: column;
  align-items: center;
  position: relative;
}

.main {
  position: relative;
  z-index: 1;
}

.day-weather-item {
  margin-top: 16px;
  flex-direction: column;
}

.day-weather-title {
  font-size: 28px;
  color: rgba(255, 255, 255, 0.8);
}

.day-weather-desc {
  font-size: 32px;
}

.small-weather-icon {
  width: 48px;
  height: 48px;
}
</style>
