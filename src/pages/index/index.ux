<template>
  <div class="page" style="padding-bottom: 24px">
    <div class="header">
      <text class="location">{{ location }}</text> 
    <text class="page-subtitle">{{ updateTime }}</text>
    </div>
    <div class="hero-content">
      <image class="icon-weather" src="/common/weather/weather_{{ iconCode }}.png" />
      <!-- <text class="temperature">{{ temperature }}</text> -->
      <text class="text-weather">{{ textDay }}</text>
      <text class="temp-min-max">{{ tempMinMax }}</text>
    </div>

    <div class="page-list" style="margin-top: 28px">
      <div style="margin-top: -2px; flex-direction: column">
        <div style="margin-top: 14px; flex-direction: column" for="{{ item in figure }}">
          <text class="figure-desc">{{ item.value }}</text>
          <text class="figure-title">{{ item.name }}</text>
        </div>
      </div>
    </div>

    <div class="page-list" style="margin-top: 12px">
      <div style="margin-top: -8px; flex-direction: column">
        <div class="day-weather-item" for="{{ item in dayWeather }}" @click="DetailInfo(item)">
          <text class="day-weather-title">{{ item.name }}</text>
          <div style="justify-content: space-between">
            <text class="day-weather-desc">{{ item.tempMinMax }}</text>
            <image
              class="small-weather-icon"
              src="/common/weather/weather_{{ item.iconCode }}.png"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- <div class="hero-content" style="margin-top: 24px">
      <div class="button" onclick="Detail()">
        <text class="button-text">查看更多</text>
      </div>
    </div> -->
  </div>
</template>

<script>
import router from "@system.router"
import file from "@system.file"
import {showToast} from "@system.prompt"
// import weather from "./weather.json"
import interconnect from "@system.interconnect" // 引入 interconnect

export default {
  private: {
    location: "__",
    updateTime: "__",
    iconCode: "__",
    textDay: "__",
    tempMinMax: "__°/__°",
    figure: [
      {name: "紫外线指数", value: "__", uniqueId: 1},
      {name: "相对湿度 （%）", value: "__", uniqueId: 2},
      {name: "__", value: "__", uniqueId: 3},
      {name: "气压 （hPa）", value: "__", uniqueId: 4}
    ],
    dayWeather: [
      {name: "今天", tempMinMax: "__", iconCode: "__", uniqueId: 1},
      {name: "明天", tempMinMax: "__", iconCode: "__", uniqueId: 2},
      {name: "后天", tempMinMax: "__", iconCode: "__", uniqueId: 3},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 4},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 5},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 6},
      {name: "__", tempMinMax: "__", iconCode: "__", uniqueId: 7}
    ]
  },

  DetailInfo(selectedItem) {
    if (selectedItem && selectedItem.fxDate) {
      router.push({
        uri: "/pages/detail",
        params: {
          selectedDate: selectedItem.fxDate
        }
      });
    } else {
      console.warn('DetailInfo: selectedItem or fxDate is missing');
      showToast({ message: "无法跳转到详情页", duration: 2000 });
    }
  },

  // 获取天气图标映射表
  getIconMap() {
    return {
      // 晴天
      100: 11, // 晴
      101: 1, // 多云
      102: 1, // 少云
      103: 1, // 晴间多云
      104: 2, // 阴
      150: 11, // 晴
      151: 1, // 多云
      152: 1, // 少云
      153: 1, // 晴间多云

      // 雨
      300: 5, // 阵雨
      301: 5, // 强阵雨
      302: 5, // 雷阵雨
      303: 5, // 强雷阵雨
      304: 5, // 雷阵雨伴有冰雹
      305: 4, // 小雨
      306: 4, // 中雨
      307: 4, // 大雨
      308: 4, // 极端降雨
      309: 4, // 毛毛雨/细雨
      310: 4, // 暴雨
      311: 4, // 大暴雨
      312: 4, // 特大暴雨
      313: 4, // 冻雨
      314: 4, // 小到中雨
      315: 4, // 中到大雨
      316: 4, // 大到暴雨
      317: 4, // 暴雨到大暴雨
      318: 4, // 大暴雨到特大暴雨
      350: 5, // 阵雨
      351: 5, // 强阵雨
      399: 4, // 雨

      // 雪
      400: 7, // 小雪
      401: 7, // 中雪
      402: 7, // 大雪
      403: 7, // 暴雪
      404: 6, // 雨夹雪
      405: 6, // 雨雪天气
      406: 6, // 阵雨夹雪
      407: 7, // 阵雪
      408: 7, // 小到中雪
      409: 7, // 中到大雪
      410: 7, // 大到暴雪
      456: 6, // 阵雨夹雪
      457: 7, // 阵雪
      499: 7, // 雪

      // 雾霾
      500: 10, // 薄雾
      501: 3, // 雾
      502: 10, // 霾
      503: 8, // 扬沙
      504: 8, // 浮尘
      507: 8, // 沙尘暴
      508: 8, // 强沙尘暴
      509: 3, // 浓雾
      510: 3, // 强浓雾
      511: 10, // 中度霾
      512: 10, // 重度霾
      513: 10, // 严重霾
      514: 3, // 大雾
      515: 3, // 特强浓雾

      // 风
      900: 99, // 热
      901: 99, // 冷
      999: 99 // 未知
    }
  },

  formatTimeAgo(updateTime) {
    const now = new Date()
    const diffMs = now - updateTime
    const diffMins = Math.floor(diffMs / 60000)
    const diffHours = Math.floor(diffMins / 60)
    const diffDays = Math.floor(diffHours / 24)

    if (diffMins < 1) {
      return "刚刚"
    } else if (diffMins < 60) {
      return diffMins + "分钟前"
    } else if (diffHours < 24) {
      return diffHours + "小时前"
    } else {
      return diffDays + "天前"
    }
  },

  getTodayString() {
    const today = new Date()
    const year = today.getFullYear()
    const month = String(today.getMonth() + 1).padStart(2, "0")
    const day = String(today.getDate()).padStart(2, "0")
    return `${year}-${month}-${day}`
  },

  updateCurrentWeather(weatherData, todayData, timeAgo, iconMap) {
    this.updateTime = timeAgo
    this.iconCode = iconMap[todayData.iconDay] || todayData.iconDay
    this.textDay = todayData.textDay
    this.tempMinMax = `${todayData.tempMin}°/${todayData.tempMax}°`
  },

  updateWeatherFigures(todayData) {
    this.figure = [
      {name: "紫外线指数", value: todayData.uvIndex, uniqueId: 1},
      {name: "相对湿度 （%）", value: todayData.humidity, uniqueId: 2},
      {name: todayData.windDirDay, value: todayData.windScaleDay, uniqueId: 3},
      {name: "气压 （hPa）", value: todayData.pressure, uniqueId: 4}
    ]
  },

  updateForecast(weatherData, today, todayData, iconMap) {
    const weekdays = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];

    this.dayWeather = weatherData.daily
      .filter((day) => {
        const dateParts = day.fxDate.split("-");
        const date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
        const timeDiff = date.getTime() - today.getTime();
        const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
        return dayDiff >= -1;
      })
      .map((day) => {
        const dateParts = day.fxDate.split("-");
        const date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
        const dayOfWeek = date.getDay();
        const timeDiff = date.getTime() - today.getTime();
        const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

        let displayName;
        if (dayDiff === -1) {
          displayName = "昨天";
        } else if (dayDiff === 0) {
          displayName = "今天";
        } else if (dayDiff === 1) {
          displayName = "明天";
        } else if (dayDiff === 2) {
          displayName = "后天";
        } else if (dayDiff > 7) {
          displayName = `${dateParts[1]}/${dateParts[2]}`;
        } else {
          displayName = weekdays[dayOfWeek];
        }

        return {
          fxDate: day.fxDate,
          name: displayName,
          tempMinMax: `${day.tempMin}°/${day.tempMax}°`,
          iconCode: iconMap[day.iconDay] || day.iconDay,
          uniqueId: dayDiff + 1
        };
      });
  },

  onInit() {
    // 模拟器中模拟数据，发版时记得注释掉

    // file.writeText({
    //   uri: "internal://files/weather.txt",
    //   text: JSON.stringify(weather),
    //   success: function () {
    //     showToast({message: "模拟数据成功", duration: 200})
    //   },
    //   fail: function (data, code) {
    //     showToast({message: `模拟数据失败${code}`, duration: 200})
    //   }
    // })

    // 检查天气数据文件是否存在
    file.readText({
      uri: "internal://files/weather.txt",
      success: (data) => {
        try {
          const weatherData = JSON.parse(data.text)
          const updateTime = new Date(weatherData.updateTime)
          const timeAgo = this.formatTimeAgo(updateTime)
          const iconMap = this.getIconMap()
          const todayStr = this.getTodayString()
          const today = new Date()
          let todayData = weatherData.daily.find((day) => day.fxDate === todayStr)

          if (todayData) {
            this.updateCurrentWeather(weatherData, todayData, timeAgo, iconMap)
            this.location = weatherData.location || "未知地点";
            this.updateWeatherFigures(todayData)
            this.updateForecast(weatherData, today, todayData, iconMap)
          } else {
            showToast({message: "数据已过期", duration: 200})
          }
        } catch (e) {
          console.error("解析天气数据失败:", e)
          showToast({message: "数据格式错误", duration: 200})
        }
      },
      fail: (data, code) => {
        showToast({message: "本地无数据", duration: 200})
      }
    })
  },

  onShow() {
    // 创建本地 interconnect 实例
    const connect = interconnect.instance()

    connect.onmessage = (data) => {
      file.readText({
        uri: "internal://files/weather.txt",
        success: function () {
          file.writeText({
            uri: "internal://files/weather.txt",
            text: data.data,
            success: function () {
              showToast({message: "数据更新，请重启应用", duration: 200})
            },
            fail: function (data, code) {
              showToast({message: `数据更新失败${code}`, duration: 200})
            }
          })
        },
        fail: function (code) {
          file.writeText({
            uri: "internal://files/weather.txt",
            text: data.data,
            success: function () {
              showToast({message: "数据保存，请重启应用", duration: 200})
            },
            fail: function (data, code) {
              showToast({message: `数据保存失败${code}`, duration: 200})
            }
          })
        }
      })
    }

    connect.onerror = (error) => {
      console.error("Connection error:", error)
    }

    connect.onclose = () => {
      console.log("Connection closed")
      setTimeout(() => {
        connect.open()
      }, 5000)
    }

    connect.open()
    
    // 存储 connect 实例，以便 onHide/onDestroy 调用 close()
    this._connectInstance = connect
  },

  onHide() {
    if (this._connectInstance && typeof this._connectInstance.close === "function") {
      this._connectInstance.close()
    }
  },

  onDestroy() {
    if (this._connectInstance && typeof this._connectInstance.close === "function") {
      this._connectInstance.close()
    }
  }
}
</script>

<style>
@import "../../common/style.css";

.icon-weather {
  width: 85px;
  height: 85px;
  margin-top: 40px;
}

.hero-content {
  flex-direction: column;
  align-items: center;
}

.page-list {
  flex-direction: column;
  padding: 0 12px 12px 12px;
  color: #ffffff;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
}

.temperature {
  font-size: 64px;
  font-weight: bold;
  margin-top: 0px;
  padding-left: 10px;
}

.text-weather {
  font-size: 36px;
  font-weight: bold;
  margin-top: 0px;
}

.temp-min-max {
  font-size: 36px;
  font-weight: bold;
  color: rgba(255, 255, 255, 0.8);
  margin-top: 8px;
  padding-left: 6px;
  margin-bottom: 40px;
}

.aqi {
  font-size: 28px;
  font-weight: bold;
  margin-top: 66px;
}

.aqi-desc {
  font-size: 28px;
  font-weight: bold;
  margin-top: 2px;
}

.figure-title {
  font-size: 24px;
  margin-top: 2px;
  color: rgba(255, 255, 255, 0.8);
}

.figure-desc {
  font-size: 39px;
  font-weight: bold;
  margin-left: -1px;
}
.day-weather-item {
  margin-top: 16px;
  flex-direction: column;
}
.day-weather-title {
  font-size: 28px;
  color: rgba(255, 255, 255, 0.8);
}

.day-weather-desc {
  font-size: 32px;
}

.small-weather-icon {
  width: 48px;
  height: 48px;
}

.button {
  flex-direction: column;
  align-items: center;
  background-color: rgba(255, 255, 255, 0.2);
  padding: 18px 20px;
  border-radius: 50%;
}

.button-text {
  font-size: 29px;
}
</style>