<template>
  <!-- 页面容器，支持右滑返回 -->
  <div class="page" @swipe="toHomePage">
    <!-- 头部信息：地点和选中日期 -->
    <div class="header">
      <text class="page-title">详情</text>
      <text class="page-subtitle">{{ updateTime }}</text>
    </div>

    <!-- 当前天气概览 -->
    <div class="hero-content">
      <image class="weather-icon" src="/common/weather-icons/{{ iconCode }}.png" />
      <text class="weather-text">{{ textDay }}</text>
      <text class="temp-min-max">{{ tempMinMax }}</text>
    </div>

    <!-- 按类别组织的详细天气数据 -->
    <div class="page-list" style="margin-top: 12px" for="{{ category in weatherCategories }}">
      <div style="margin-top: -2px; flex-direction: column">
        <div style="margin-top: 14px; flex-direction: column" for="{{ item in category.items }}">
          <text class="figure-desc">{{ item.value }}</text>
          <text class="figure-title">{{ item.name }}</text>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
// 导入所需模块
import router from "@system.router" // 页面路由
import file from "@system.file" // 文件操作
import {showToast} from "@system.prompt" // 提示信息
import WeatherUtils from "../../common/weather-utils.js"

export default {
  // 接收来自 index 页面的 selectedDate 参数
  protected: {
    selectedDate: "" // 接收字符串格式的日期，例如 "2025-08-30"
  },

  // 页面私有数据
  private: {
    location: "__", // 地点
    updateTime: "__", // 选中的日期或加载状态
    iconCode: "__", // 天气图标代码
    textDay: "__", // 白天天气描述
    tempMinMax: "__°/__°", // 最高/最低温度

    // 按类别组织的天气指标数据
    weatherCategories: [
      {
        // 基础气象指标
        items: [
          {name: "紫外线指数", value: "__", uniqueId: 1},
          {name: "相对湿度 (%)", value: "__", uniqueId: 2},
          {name: "大气压强 (hPa)", value: "__", uniqueId: 5},
          {name: "能见度 (km)", value: "__", uniqueId: 7},
          {name: "云量 (%)", value: "__", uniqueId: 8}
        ]
      },
      {
        // 降水指标
        items: [{name: "总降水量 (mm)", value: "__", uniqueId: 6}]
      },
      {
        // 日间天气
        items: [
          {name: "白天天气描述", value: "__", uniqueId: 13},
          {name: "白天风向", value: "__", uniqueId: 3},
          {name: "白天风力等级", value: "__", uniqueId: 4},
          {name: "白天风速 (km/h)", value: "__", uniqueId: 17},
          {name: "白天风向角度", value: "__", uniqueId: 19}
        ]
      },
      {
        // 夜间天气
        items: [
          {name: "夜间天气描述", value: "__", uniqueId: 14},
          {name: "夜间风向", value: "__", uniqueId: 15},
          {name: "夜间风力等级", value: "__", uniqueId: 16},
          {name: "夜间风速 (km/h)", value: "__", uniqueId: 18},
          {name: "夜间风向角度", value: "__", uniqueId: 20}
        ]
      },
      {
        // 天文时间
        items: [
          {name: "日出时间", value: "__", uniqueId: 9},
          {name: "日落时间", value: "__", uniqueId: 10},
          {name: "月升时间", value: "__", uniqueId: 21},
          {name: "月落时间", value: "__", uniqueId: 22},
          {name: "月相名称", value: "__", uniqueId: 23}
        ]
      }
    ],

    // 右滑返回index页面
    toHomePage(eve) {
      if (eve.direction === "right") {
        router.back()
      }
    }
  },

  // 获取天气图标映射表 - 使用通用工具类
  getIconMap() {
    return WeatherUtils.WeatherIconMap
  },

  // 根据传入的 selectedData 更新 weatherCategories 中的各项 value - 使用通用工具类
  updateWeatherFigures(selectedData) {
    const valueMap = WeatherUtils.WeatherDataUtils.getDetailedWeatherFigures(selectedData)
    
    // 遍历 this.weatherCategories 数组及其 items，根据 uniqueId 更新 value
    this.weatherCategories = this.weatherCategories.map((category) => {
      return {
        items: category.items.map((item) => {
          return {
            ...item,
            value: valueMap[item.uniqueId] !== undefined ? valueMap[item.uniqueId] : item.value
          }
        })
      }
    })
  },

  // 根据传入的 selectedData 和 iconMap 更新页面顶部的天气概览信息 - 使用通用工具类
  updateCurrentWeather(selectedData, iconMap) {
    WeatherUtils.WeatherDataUtils.updateDetailCurrentWeather(this, selectedData)
  },

  // 页面初始化函数，处理从index页面传递的日期参数并加载对应天气数据
  onInit() {
    // 检查是否接收到日期参数
    if (!this.selectedDate) {
      showToast({message: "未接收到日期", duration: 2000}) // 显示错误提示
      return // 无参数则直接返回
    }

    // 读取本地天气数据文件
    file.readText({
      uri: "internal://files/weather.txt", // 指定文件路径
      // 文件读取成功的回调函数
      success: (data) => {
        try {
          // 解析 JSON 数据
          const weatherData = JSON.parse(data.text)

          // 根据 selectedDate 查找对应的数据
          // 注意：这里直接使用字符串比较，因为 selectedDate 是字符串，fxDate 也是字符串
          let selectedData = weatherData.daily.find((day) => day.fxDate === this.selectedDate)

          if (selectedData) {
            const iconMap = this.getIconMap() // 获取图标映射表

            // 更新顶部天气概览
            this.updateCurrentWeather(selectedData, iconMap)

            // 更新天气指标面板 (使用 selectedData)
            this.updateWeatherFigures(selectedData)
          } else {
            // 如果没有找到对应日期的数据
            showToast({message: "数据缺失", duration: 2000}) // 显示错误提示
          }
        } catch (e) {
          // JSON 解析失败
          showToast({message: "数据格式错误", duration: 2000}) // 显示错误提示
        }
      },
      // 文件读取失败的回调函数
      fail: (data, code) => {
        // 文件读取失败
        showToast({message: "无法读取天气数据", duration: 2000}) // 显示错误提示
      }
    })
  }
}
</script>

<style>
@import "../../common/style.css";
</style>
